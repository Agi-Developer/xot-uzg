#summary Creating or Modifying a channel script

= Introduction =

A channel consists of a number of files in a folder. That folder must reside in the Channels folder of the XOT Script. This is an example of the layout:

{{{
+ Channels
  |    |
  |    + Channel1
  |    |    + chn_channel1.py
  |    |    + channel1icon.png
  |    |    + channel1largeicon.png
  |    |    + channel1background.png
  |    |    + channel1background16x9.png
}}}

*Please notice the channelname (Channel1) and the channelscript filename (chn_channel1.py)*. This is no coincidence! If the folder is named <Channel> the channelscript should be called chn_<Channel>.py!

The channel is completely managed from the chn_<channel>.py (from now on I will call it chn_name.py). 

= Channel Script =

Let's first have a quick look into the first lines of a chn_name.py:

{{{
#===============================================================================
# Import the default modules
#===============================================================================
from cgi import log
import xbmc, xbmcgui 
import sys, os
#===============================================================================
# Make global object available
#===============================================================================
import common
import config
import controls
import contextmenu
import chn_class

logFile = sys.modules['__main__'].globalLogFile
uriHandler = sys.modules['__main__'].globalUriHandler

#===============================================================================
# register the channels
#===============================================================================
register = sys.modules['progwindow']
register.channelRegister.append('chn_name.Channel("xot-channelwindow.xml", config.rootDir, config.skinFolder, channelCode="channelName")')

#===============================================================================
# main Channel Class
#===============================================================================
class Channel(chn_class.Channel):
    #===============================================================================
    # define class variables
    #===============================================================================
    def InitialiseVariables(self):
}}}
Let's look at some parts:

  # The first part (_Import the default modules_) is of no interest to us, it is just needed for the working of the script. *Don't edit this part!*
  # The second part (_Make global object available_) is essential to the chn_name.py, but not to the user. This part just contains some imports of XOT modules and a mapping to the logFile and uriHandler. *Don't edit this part!*
  # Then there is the third part: _register the channels_. Now this part is very essential and you can, no you MUST, *edit* it!. Ut contains the registration of the channel within the XOT Framework! The `register = sys.modules['progwindow']` should always remain, but the second line can be edited. It should look like this: `register.channelRegister.append('chn_name.Channel("xot-channelwindow.xml", config.rootDir, config.skinFolder, channelCode="channelName")')` where `chn_name` is the name of the channelscript file, `xot-channelwindow.xml` the WindowXML file to use with this channel, the `config.rootDir, config.skinFolder` should not be changed and the last part, `channelCode="channelName"` can be used to name your channel (mostly for coding).
  # The fouth part: _main Channel Class_ is the main channelClass that holds all your code. As you can see (asuming some Python knowledge), it inherits from the `chn_class.Channel`, hence the import `import chn_class`. 

The inheritance named under part 4 makes the XOT work with very little coding. The channel only needs the barely necessary methodes to function. All other methodes will be inherited from the `chn_class.py`.

= Channel Script Methodes =

These are the main methodes that are available to you in the chn_name.py:
{{{
def InitialiseVariables(self):
def onActionFromContextMenu(self):
def ParseMainList(self):
def CreateEpisodeItem(self, resultSet):
def PreProcessFolderList(self, data):
def CreateFolderItem(self, resultSet):
def CreateVideoItem(self, resultSet):
def UpdateVideoItem(self, item):
def LogOn(self, *args):
}}}

Each of these functions are discussed below:

== def InitialiseVariables(self) ==
This methode defines, as it names already indicates, the initial variables. It should be present in each script and contains some very important variables. Below you see a typical IntialiseVariables section. The table under the example explains the different variables.

{{{
#===============================================================================
# define class variables
#===============================================================================
def InitialiseVariables(self):
    """
    Used for the initialisation of user defined parameters. All should be 
    present, but can be adjusted
    """
    # call base function first to ensure all variables are there
    chn_class.Channel.InitialiseVariables(self)
        
    self.contextMenuEnabled = False
    self.icon = ""
    self.iconLarge = ""
    self.noImage = ""
    self.backgroundImage = ""  # if not specified, the one defined in the skin is used
    self.backgroundImage16x9 = ""  # if not specified, the one defined in the skin is used
    self.channelName = "Channel Class"
    self.moduleName = "chn_class.py"
    self.maxXotVersion = "1.0.0"
    self.sortOrder = 255 #max 255 channels
    self.buttonID = 0
        
    self.initialUri = ""
    self.baseUrl = ""
    self.playerUrl = ""
        
    self.passWord = ""
    self.userName = ""
    self.logonUrl = ""
    self.requiresLogon = False
        
    self.episodeItemRegex = '' # used for the ParseMainList
    self.episodeSort = True
    self.videoItemRegex = ''   # used for the CreateVideoItem 
    self.folderItemRegex = ''  # used for the CreateFolderItem
    self.mediaUrlRegex = ''    # used for the UpdateVideoItem
        
    #========================================================================== 
    # non standard items
        
    return True
}}}

|| *Variable* || *Description* || *Required* || *Values* || *Default* ||
|| self.contextMenuEnabled || Should a contextmenu be available? || True/False || No || False||
|| self.icon || ChannelIcon Filename || Yes || "Filename.png" || ""|| 
|| self.iconLarge || LargeChannelIcon Filename || Yes || "FileNameLarge.png" || "" ||
|| self.noImage || Image shown on Episode window when no episode is selected. || No || "Filename.png || "" ||
|| self.backgroundImage || Background image for 4x3 Aspect Ratio. || No || "Filename.png" || Default Skin Background ||
|| self.backgroundImage16x9 || Background image for 16x9 Aspect Ratio. || No || "Filename.png" || Default Skin Background ||
|| self.channelName || Name of the channel || Yes || "ChannelName" || "" ||
|| self.moduleName || Filename of the module || Yes || "chn_name1.py" || "" ||
|| self.maxXotVersion || Maximum version of the XOT framework for which this channel will work. If the XOT Framework version is higher than self.maxXotVersion the channel will not be loaded. || Yes || x.x.x || 0.0.0 ||
|| self.sortOrder || Sort Order in main channel window. || No || 0-255 || 255 ||    
|| self.buttonID || Button ID if the channel should be linked with a button. *CAUTION* Either all channels should have buttons or none. See the [Button Wiki Buttons] Page. || No || 0-255 || 0 ||


to be continued






